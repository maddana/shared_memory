		**************** Assignment 3 ***************


***************Create Shared Memory******************
<p>
#include <sys/ipc.h>
#include<stdio.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include<stdlib.h>
#include<unistd.h>
#include<errno.h>
extern int errno;
main ()
{
  key_t k = ftok ("shmprj", 80);
  printf ("Key obtained is %x\n", k);
  if (k == -1)
    {
      perror("ftok");
      exit (1);
    }
  int shmid = shmget (k, 100, IPC_CREAT | S_IRWXU);
  printf ("Shm identifier is %x\n", shmid);
  if (shmid == -1)
    {
      perror("shmget");
      exit (1);
    }
}
</p><br>
**************Create Semaphore**********************
<p>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<errno.h>
#include<sys/stat.h>
extern int errno;
main ()
{
  int semid = semget (ftok ("shmprj",80), 2, IPC_CREAT | S_IRWXU);
  printf ("setget returned %d\n", semid);
  if (semid == -1)
    {
      perror("semget");
      exit (1);
    }
}
</p><br>


*************producer**************

<p>
#include <sys/ipc.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/sem.h>
#include <sys/shm.h>
#include <stdio.h>
#include <signal.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
union semun
{
  int val;                      /* Value for SETVAL */
  struct semid_ds *buf;         /* Buffer for IPC_STAT, IPC_SET */
  unsigned short *array;        /* Array for GETALL, SETALL */
  struct seminfo *__buf;        /* Buffer for IPC_INFO(Linux-specific) */
};

int main (int argc, char *argv[])
{
  unsigned short sem_values[2] = { 1, 0 };
  union semun ctlun;
  int consumer_pid = 0;
  key_t k = ftok ("shmprj",80);
  printf ("Key is: %d\n", k);
  if (k < 0)
    {
      perror ("ftok not created");
      exit (1);
    }

  int shmid = shmget (k, 100, IPC_CREAT | S_IRWXU);
  printf ("Shmid is: %d\n", shmid);
  if (shmid < 0)
    {
      perror ("shmget not created the address");
      exit (2);
    }

  void *attach_addr = shmat (shmid, 0, 0);
  if((int)attach_addr<0)
     {
     perror("shmat not able to get the attach address");
     exit(3);
     } 

  int semid = semget (k, 2, IPC_CREAT | S_IRWXU);
  printf ("Semid is: %d\n", semid);
  if (semid < 0)
    {
      perror ("semget not created the shmid");
      exit (4);
    }

  ctlun.array = sem_values;

  int ret1 = semctl (semid, 0, SETALL, ctlun);
  if (ret1 < 0)
    {
      perror ("semctl");
      exit (4);
    }


  int fd = open ("shmprj",O_RDONLY);
  if (fd < 0)
    {
      perror ("open not owrking");
      exit (5);
    }

  while (consumer_pid == 0)
    {
      char pid[5] = { '0' };
      strcpy (pid, (char *) at_adr);
       consumer_pid = atoi (pid);
      if (consumer_pid > 0)
        printf ("Consumer Pid = %d\n", consumer_pid);
    }


  int ret;
  char buf[256];
  struct sembuf sembuf_array[1];
  while ((ret = read (fd, buf, sizeof (buf))) > 0)
    {
      memset (&sembuf_array, 0, sizeof (sembuf_array));
      sembuf_array[0].sem_num = 0;
      sembuf_array[0].sem_op = -1;
      int s = semop (semid, sembuf_array, 1);
      if (s < 0)
        {
          perror ("semop");
          exit (6);
        }

      memset (attach_addr, 0,sizeof(buf));
      strcpy ((char *) attach_addr, buf);
      memset (buf, 0,sizeof(buf));

      memset (&sembuf_array, 0, sizeof (sembuf_array));
      sembuf_array[0].sem_num = 1;
      sembuf_array[0].sem_op = 1;
      s = semop (semid, sembuf_array, 1);
      if (s < 0)
        {
          perror ("semop");
          exit (7);
        }

    }

  if (ret < 0)
    {
      perror ("unable to read");
      exit (8);
    }

  if (shmdt (attach_addr) < 0)
    {
      perror ("shmdt dettach is failed");
      exit (9);
    }

  close (fd);

  if ((kill (consumer_pid, 10)) < 0)
    {
      perror ("Kill failed");
      exit (10);
    }

  return 0;
}
</p><br>

*****************consumer******************
<p>

#include <sys/ipc.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/sem.h>
#include <sys/shm.h>
#include <stdio.h>
#include <signal.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
union semun
{
  int val;                      /* Value for SETVAL */
  struct semid_ds *buf;         /* Buffer for IPC_STAT, IPC_SET */
  unsigned short *array;        /* Array for GETALL, SETALL */
  struct seminfo *__buf;        /* Buffer for IPC_INFO(Linux-specific) */
};

int flag = 0;
int *attach_addr;

void compare_file ();

void myhandler ()
{
  if (shmdt (at_adr) < 0)
    {
      perror ("shmdt dettach is failed");
      exit (10);
    }
  compare_file ();
  exit (0);
}

void compare_file ()
{
  int f1 = open ("shmprj", O_RDONLY);
  if (f1 < 0)
    {
      perror ("shmprj file open failed");
      exit (11);
    }
  int f2 = open ("shmprj1", O_RDONLY);
  if (f1 < 0)
    {
      perror ("shmprj1 file open failed");
      exit (12);
    }

  int f = 0;
  int ret1, ret2;
  char ch1 = '0', ch2 = '0';
  while (f == 0)
    {
      if ((ret1 = read (f1, &ch1, 1)) < 0)
        {
          perror ("shmprj read failed");
          exit (13);
        }
      if ((ret2 = read (f2, &ch2, 1)) < 0)
        {
          perror ("shmprj1 read failed");
          exit (14);
        }
      if (ch1 != ch2)
        {
          printf ("Files don't match !!!\n");
          return;
        }
      if (ret1 == 0 && ret2 == 0)
        {
          printf ("Files Match.\n");
          return;
        }
    }
  return;
}

int main (int argc, char *argv[])
{
  unsigned short sem_values[2] = { 1, 0 };
  union semun ctlun;
  key_t k = ftok ("shmprj",80);
  printf ("cons pid = %d\n", getpid ());
  printf ("Key is: %d\n", k);
  if (k < 0)
    {
      perror ("ftok not created");
      exit (1);
    }

  int shmid = shmget (k, 100, IPC_CREAT | S_IRWXU);
  printf ("Shmid is %d\n", shmid);
  if (shmid < 0)
    {
      perror ("shmget not created");
      exit (2);
    }

  attach_addr = shmat (shmid, 0, 0);

  int semid = semget (k, 2, IPC_CREAT | S_IRWXU);
  printf ("Semid is: %d\n", semid);
  if (semid < 0)
    {
      perror ("semget not created");
      exit (4);
    }

  ctlun.array = sem_values;

  int ret1 = semctl (semid, 0, SETALL, ctlun);
  if (ret1 < 0)
    {
      perror ("semctl not created");
      exit (3);
    }


  int fd = open ("shmprj1", O_CREAT | O_WRONLY, S_IRWXU);
  if (fd < 0)
    {
      perror ("open not working");
      exit (5);
    }


  memset (attach_addr, 0, 100);
  sprintf ((char *) attach_addr, "%d", getpid ());


  int ret;
  char buf[100];
  struct sembuf sembuf_array[1];
  while (flag == 0)
    {
      memset (&sembuf_array, 0, sizeof (sembuf_array));
      sembuf_array[0].sem_num = 1;
      sembuf_array[0].sem_op = -1;
      int s = semop (semid, sembuf_array, 1);
      if (s < 0)
        {
          perror ("semop");
          exit (6);
        }

      memset (buf, 0, 100);
      strcpy (buf, (char *) attach_addr);
      ret = write (fd, buf, strlen (buf));
      printf ("%s\n", buf);
      memset (at_adr, 0, 100);
      if (ret < 0)
        {
          perror ("write is not writting");
          exit (7);
        }
      memset (&sembuf_array, 0, sizeof (sembuf_array));
      sembuf_array[0].sem_num = 0;
      sembuf_array[0].sem_op = 1;
      s = semop (semid, sembuf_array, 1);
      if (s < 0)
        {
          perror ("semop");
          exit (8);
        }

      signal (10, myhandler);
    }


  return 0;
}

******************TCP SERVER***************

#include<stdio.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<sys/socket.h>
#include<errno.h>
#include<netinet/in.h>
#include<stdlib.h>
#include<string.h>
extern int errno;
struct emp{
int id;
char name[20];
};
struct emp *newnode;
main ()
{
  newnode=malloc(sizeof(struct emp));
  int ret, ret1, ret2, fd;
  int sd = socket(AF_INET, SOCK_STREAM, 0);
  if (sd == -1)
    {
      printf("sd=%d and errno =%d\n", sd, errno);
      exit(1);
    }
  else
    printf("sd=%d\n", sd);
  struct sockaddr_in serv_addr;
  memset(&serv_addr, 0, sizeof (serv_addr));
  serv_addr.sin_family = PF_INET;
  serv_addr.sin_addr.s_addr = htonl (INADDR_ANY);
  serv_addr.sin_port = htons (2400);

  ret = bind(sd,(struct sockaddr *) &serv_addr, sizeof (serv_addr));
  if (ret == -1)
    {
      printf("bind=%d,errno=%d\n", ret, errno);
      exit(1);
    }
  else
    printf("Bind=%d\n", ret);
  ret1 = listen(sd, 10);
  if (ret1 == -1)
    {
      printf("Listen=%d and errno=%d\n", ret1, errno);
      exit(1);
    }
  else
    printf("Listen=%d\n", ret1);
  struct sockaddr_in from_addr;
  char buf[4096];
  int fromsize = sizeof(struct sockaddr_in);
  int connected_sd;
  while (1)
    {
      connected_sd = accept(sd,(struct sockaddr *) &from_addr, &fromsize);
      if (connected_sd == -1)
        {
          printf("connected_sd=%d and errno=%d\n", connected_sd, errno);
          exit (1);
        }
      else
        {
          printf("connected_sd=%d\n", connected_sd);
/*        fd = open("server1.txt",O_RDWR, S_IRWXU);
          if(fd < 0)
            {
              printf("File Descriptor=%d and errno=%d\n", fd, errno);
              exit(1);
            }*/
            newnode->id=20;
            strcpy(newnode->name,"rajesh");
            sprintf(buf,"%d %s",newnode->id,newnode->name);
          //ret = read (fd, buf, 256);
          //printf("listen returned = %d\n", ret);
          write(connected_sd, buf,sizeof(buf));
          //close(fd);
        }
    }
}

*****************TCP CLIENT************************

#include <stdio.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<sys/stat.h>
#include<errno.h>
#include<fcntl.h>
#include<stdlib.h>
#include<string.h>
#include<netinet/in.h>
extern int errno;
main ()
{
  int ret;
  int sd, fd;
  int ret1;
  int buf[256];
  sd = socket (PF_INET, SOCK_STREAM, 0);
  printf ("sd = %d\n", sd);
  if (sd == -1)
    {
      printf ("sd = %d, errno = %d\n", errno);
      exit (1);
    }
  struct sockaddr_in serv_addr;
  memset (&serv_addr, 0, sizeof (serv_addr));
  serv_addr.sin_family = PF_INET;
  if (inet_pton (AF_INET, "127.0.0.1", &serv_addr.sin_addr.s_addr) <= 0)
    {
      printf ("inet_pton ERROR. errno is %d\n", errno);
      exit (1);
    }
  serv_addr.sin_port = htons (2400);
  ret = connect (sd, (struct sockaddr *) &serv_addr, sizeof (serv_addr));
  printf ("connect  returned = %d\n", ret);
  fd = open ("server1.txt", O_RDWR, S_IRWXU);
  if (fd < 0)
    {
      printf ("fd=%d and errno=%d\n", fd, errno);
      exit (1);
    }
  while ((ret1 = read (sd, buf, 256)) > 0)
    {
 //     write (1, buf, ret1);
        puts(buf);
    }
  // close (fd);
  if (ret1 == -1)
    {
      printf ("ret = %d, errno = %d\n", errno);
      exit (1);
    }
}

** We use only x86 architecture systems so there is need to deserialize the data
if we use different architecture system then we have to use deserialization of the data.
* To deserialize the data we have a function called strtok(buffer,delimiter).
</p><br>
************************7.1 XML***********************
<p>
* Yes we can store the data in xml format.
* For storing the data in xml format we have to use xml tags.
* Only when we have a structure we can use xml,it supports only structure.
* With instance object of the structure it can be communicated or tranfer the data.
* For example if we have a structure
	struct emp{
		int id;
		char name[20];
		};
	struct emp *ptr;
* Then we can use xml tag <id> 20</id> and <name>"rajesh"</name>
* We can get the data by fprintf(fileptr,"%d  %s",ptr->id,ptr->name);
</p><br>

***********************7.2 Binary Formate***************
<p>
* If the data has to be stored in binary format we have to use System call or libc functions.
* If we use this it automatically convert the file data into binary format.
* If you copy and paste into a file it won't we converted into the binary format it has to be converted using funtions.
</p><br>
strtok

